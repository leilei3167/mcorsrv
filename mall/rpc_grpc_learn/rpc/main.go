package main

import "fmt"

func Add(a, b int) int {
	return a + b
}

type Employee struct {
	Name    string
	Company string
}

func RpcPrint(e Employee) {
	/*
		客户端:
		1.第一步一定是建立连接,基于http或者tcp
		2.将对象序列化(按一定的协议)
		3.发送序列化后的数据
		4.等待服务器处理结果,接收到的服务端响应数据也需要进行反序列化
		服务端:
		1.监听网络端口
		2.读取数据,反序列化
		3.处理业务逻辑
		4.将处理结果序列化通过网络返回至客户端

		服务端和客户端一定都会有序列化和反序列化数据的模块,一定定义好数据的协议,那么客户端和服务端各自的语言实现就无所谓了

	*/
}

func main() {
	// 本地调用函数:
	fmt.Println(Add(1, 2))
	/*
		那么,如果将Add想象为一个部署在独立服务器上提供服务,该如何调用?
		一定会牵扯到以下几点问题:
		1.参数如何传递?(数据协议,如json/xml/protobuf/msgpack,甚至大公司会自研数据协议),json最简单,但性能一般
		网络调用远程的函数,那么一定存在客户端和服务端,客户端按某种协议构建数据,发送至服务端,
		服务端按协议解析数据进行处理后再按协议编码后返回结果到客户端
		2.网络传输问题,以何种协议传输? 直接用http1.1或1.2或者基于tcp自己封装

	*/
}
